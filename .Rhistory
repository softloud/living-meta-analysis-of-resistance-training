library(tidyverse)
data <- read.csv("All studies.csv")
library(metafor)
cv_avg <- function(x, sd, n, group, data, label = NULL, sub_b = TRUE, cv2=FALSE){
# Check if the name is specified or not. If not, then assign it the name of the mean, x, variable input in the function. https://stackoverflow.com/questions/60644445/converting-tidyeval-arguments-to-string
if(is.null(label)){
label <- purrr::map_chr(enquos(x), rlang::as_label)
}
# Calculate between study CV. Take weighted mean CV within study, and then take a weighted mean across studies of the within study CV. Weighted based on sample size and pooled sample size.
b_grp_cv_data <- data                                             %>%
dplyr::group_by({{group}})                            %>%
dplyr::mutate(   w_CV2 = weighted_CV({{sd}}, {{x}}, {{n}}, cv2=cv2),
n_mean = mean({{n}}, na.rm = TRUE))   %>%
dplyr::ungroup(.)                                     %>%
dplyr::mutate(b_CV2 = weighted.mean(w_CV2, n_mean, na.rm = TRUE), .keep = "used")
# Make sure that label of the calculated columns is distinct from any other columns
names(b_grp_cv_data) <- paste0(names(b_grp_cv_data), "_", label)
# Append these calculated columns back to the original data and return the full dataset.
if(sub_b){
b_grp_cv_data <- b_grp_cv_data %>% dplyr::select(grep("b_", names(b_grp_cv_data)))
dat_new <- cbind(data, b_grp_cv_data)
} else {
dat_new <- cbind(data, b_grp_cv_data)
}
return(data.frame(dat_new))
}
weighted_CV <- function(sd, x, n, cv2=FALSE){
if(cv2){
weighted.mean(na_if((sd / x)^2, Inf), n, na.rm = TRUE)
}else{
weighted.mean(na_if((sd / x), Inf), n, na.rm = TRUE)^2
}
}
View(data)
data <- cv_avg(x=pre_m, sd=pre_sd, n=n, group=study, data = data)
data <- cv_avg(x=pre_m, sd=pre_sd, n=n, group=study_code, data = data)
data <- cv_avg(x=post_m, sd=post_sd, n=n, group=study_code, data = data)
lnrr_laj <- function(m1, m2, cv1_2, cv2_2, n){
log(m1 / m2) + 0.5*((cv1_2 / n) - (cv2_2 / n))
}
v_lnrr_laj <- function(cv1_2, cv2_2, m1, m2, r, n){
((cv1_2) / n) + ((cv2_2) / n) +
((cv1_2)^2 / (2*n)^2) + ((cv2_2)^2 / (2*n)^2) +
((2*r*cv1_2*cv2_2)/n) + (r^2*cv1_2^2*cv2_2^2*(m1^4+m2^4))/(2*n^2*m1^2*m2^2)
}
data <- data %>%
filter(!is.na(pre_m) & !is.na(post_m)) %>%
mutate(yi = lnrr_laj(m1=pre_m, m2=post_m,
cv1_2 = b_CV2_pre_m, cv2_2 = b_CV2_post_m,
n=n),
vi = v_lnrr_laj(m1=pre_m, m2=post_m,
cv1_2 = b_CV2_pre_m, cv2_2 = b_CV2_post_m,
n=n, r=ri)
)
ggplot(data, aes(x=freq, y=yi)) +
geom_point()
data %>%
mutate(freq = if_else(group == CON, 0, freq)) %>%
ggplot(aes(x=freq, y=yi)) +
geom_point()
data %>%
mutate(freq = if_else(group == "CON", 0, freq)) %>%
ggplot(aes(x=freq, y=yi)) +
geom_point()
data <- data %>%
filter(!is.na(pre_m) & !is.na(post_m)) %>%
mutate(yi = lnrr_laj(m1=post_m, m2=pre_m,
cv1_2 = b_CV2_post_m, cv2_2 = b_CV2_pre_m,
n=n),
vi = v_lnrr_laj(m1=post_m, m2=pre_m,
cv1_2 = b_CV2_post_m, cv2_2 = b_CV2_pre_m,
n=n, r=ri)
)
data %>%
mutate(freq = if_else(group == "CON", 0, freq)) %>%
ggplot(aes(x=freq, y=yi)) +
geom_point()
ggplot(aes(x=freq, y=exp(yi)) +
data %>%
mutate(freq = if_else(group == "CON", 0, freq)) %>%
ggplot(aes(x=freq, y=exp(yi)) +
geom_point()
ggplot(aes(x=sets_exercise, y=yi) +
data %>%
mutate(sets_exercise = if_else(group == "CON", 0, sets_exercise)) %>%
data %>%
library(tidyverse)
library(metafor)
data <- read.csv("All studies.csv")
cv_avg <- function(x, sd, n, group, data, label = NULL, sub_b = TRUE, cv2=FALSE){
# Check if the name is specified or not. If not, then assign it the name of the mean, x, variable input in the function. https://stackoverflow.com/questions/60644445/converting-tidyeval-arguments-to-string
if(is.null(label)){
label <- purrr::map_chr(enquos(x), rlang::as_label)
}
# Calculate between study CV. Take weighted mean CV within study, and then take a weighted mean across studies of the within study CV. Weighted based on sample size and pooled sample size.
b_grp_cv_data <- data                                             %>%
dplyr::group_by({{group}})                            %>%
dplyr::mutate(   w_CV2 = weighted_CV({{sd}}, {{x}}, {{n}}, cv2=cv2),
n_mean = mean({{n}}, na.rm = TRUE))   %>%
dplyr::ungroup(.)                                     %>%
dplyr::mutate(b_CV2 = weighted.mean(w_CV2, n_mean, na.rm = TRUE), .keep = "used")
# Make sure that label of the calculated columns is distinct from any other columns
names(b_grp_cv_data) <- paste0(names(b_grp_cv_data), "_", label)
# Append these calculated columns back to the original data and return the full dataset.
if(sub_b){
b_grp_cv_data <- b_grp_cv_data %>% dplyr::select(grep("b_", names(b_grp_cv_data)))
dat_new <- cbind(data, b_grp_cv_data)
} else {
dat_new <- cbind(data, b_grp_cv_data)
}
return(data.frame(dat_new))
}
cv_avg <- function(x, sd, n, group, data, label = NULL, sub_b = TRUE, cv2=FALSE){
# Check if the name is specified or not. If not, then assign it the name of the mean, x, variable input in the function. https://stackoverflow.com/questions/60644445/converting-tidyeval-arguments-to-string
if(is.null(label)){
label <- purrr::map_chr(enquos(x), rlang::as_label)
}
# Calculate between study CV. Take weighted mean CV within study, and then take a weighted mean across studies of the within study CV. Weighted based on sample size and pooled sample size.
b_grp_cv_data <- data                                             %>%
dplyr::group_by({{group}})                            %>%
dplyr::mutate(   w_CV2 = weighted_CV({{sd}}, {{x}}, {{n}}, cv2=cv2),
n_mean = mean({{n}}, na.rm = TRUE))   %>%
dplyr::ungroup(.)                                     %>%
dplyr::mutate(b_CV2 = weighted.mean(w_CV2, n_mean, na.rm = TRUE), .keep = "used")
# Make sure that label of the calculated columns is distinct from any other columns
names(b_grp_cv_data) <- paste0(names(b_grp_cv_data), "_", label)
# Append these calculated columns back to the original data and return the full dataset.
if(sub_b){
b_grp_cv_data <- b_grp_cv_data %>% dplyr::select(grep("b_", names(b_grp_cv_data)))
dat_new <- cbind(data, b_grp_cv_data)
} else {
dat_new <- cbind(data, b_grp_cv_data)
}
return(data.frame(dat_new))
}
weighted_CV <- function(sd, x, n, cv2=FALSE){
if(cv2){
weighted.mean(na_if((sd / x)^2, Inf), n, na.rm = TRUE)
}else{
weighted.mean(na_if((sd / x), Inf), n, na.rm = TRUE)^2
}
}
# Increases
data_increase <- data %>%
filter(increase_decrease == "increase")
data <- cv_avg(x=pre_m, sd=pre_sd, n=n, group=study_code, data = data)
data <- cv_avg(x=post_m, sd=post_sd, n=n, group=study_code, data = data)
lnrr_laj <- function(m1, m2, cv1_2, cv2_2, n){
log(m1 / m2) + 0.5*((cv1_2 / n) - (cv2_2 / n))
}
v_lnrr_laj <- function(cv1_2, cv2_2, m1, m2, r, n){
((cv1_2) / n) + ((cv2_2) / n) +
((cv1_2)^2 / (2*n)^2) + ((cv2_2)^2 / (2*n)^2) +
((2*r*cv1_2*cv2_2)/n) + (r^2*cv1_2^2*cv2_2^2*(m1^4+m2^4))/(2*n^2*m1^2*m2^2)
}
# Increases
data_increase <- data %>%
filter(increase_decrease == "increase") %>%
filter(!is.na(pre_m) & !is.na(post_m)) %>%
mutate(yi = lnrr_laj(m1=post_m, m2=pre_m,
cv1_2 = b_CV2_post_m, cv2_2 = b_CV2_pre_m,
n=n),
vi = v_lnrr_laj(m1=post_m, m2=pre_m,
cv1_2 = b_CV2_post_m, cv2_2 = b_CV2_pre_m,
n=n, r=ri)
)
# Decreases
data_decrease <- data %>%
filter(increase_decrease == "decrease") %>%
filter(!is.na(pre_m) & !is.na(post_m)) %>%
mutate(yi = lnrr_laj(m1=pre_m, m2=post_m,
cv1_2 = b_CV2_pre_m, cv2_2 = b_CV2_post_m,
n=n),
vi = v_lnrr_laj(m1=pre_m, m2=post_m,
cv1_2 = b_CV2_pre_m, cv2_2 = b_CV2_post_m,
n=n, r=ri)
)
data <- rbind(data_increase, data_decrease)
data %>%
mutate(sets_exercise = if_else(group == "CON", 0, sets_exercise)) %>%
ggplot(aes(x=sets_exercise, y=yi) +
geom_point()
# Log
rma_log_model_raw <- rma.mv(yi, V=vi, data=data,
random = list(~ log(weeks) | study_code, ~ log(weeks) | arm_code, ~ 1 | es_code), mods = ~ log(weeks),
method="REML", test="t",
control=list(optimizer="optim", optmethod="Nelder-Mead"))
# Log duration
data_duration <- data %>%
filter(!is.na(weeks))
rma_log_model_raw <- rma.mv(yi, V=vi, data=data_duration,
random = list(~ log(weeks) | study_code, ~ log(weeks) | arm_code, ~ 1 | es_code), mods = ~ log(weeks),
method="REML", test="t",
control=list(optimizer="optim", optmethod="Nelder-Mead"))
rma_log_model_raw
robrma_log_model_raw <- robust(rma_log_model_raw, cluster = study_code, clubSandwich = TRUE)
range(data_duration$weeks)
xs <- seq(0, 24, length=100)
xs_log <- log(xs)
pred_robrma_log_raw <- cbind(as.data.frame(predict(robrma_log_model_raw, newmods=xs_log)),xs_log)
predict(robrma_log_model_raw, newmods=xs_log)
regplot(robrma_log_model_raw)
View(data_increase)
regplot(robrma_log_model_raw, transf = "exp")
regplot(robrma_log_model_raw, transf = exp)
ggplot(data, aes(x=weeks, y=yi)) +
geom_point()
ggplot(data, aes(x=weeks, y=exp(yi))) +
geom_point()
ggplot(data, aes(x=weeks, y=exp(yi))) +
geom_point() +
geom_smooth()
